pIP stack
=========

This is a small IPv4/UDP networking stack in user-space. I wrote this just
to (really) learn how IP/TCP works, although I don't plan implementing TCP.

Currently, pIP supports Ethernet, ARP, IPv4 and UDP (not finished yet). The
API is very modular, and I guess most of it should be reentrant. But it's
not thread-safe for sure.

You're welcome to play with this code, study it, make modifications, ask
questions, send patches etc. However, it's important to set some
expectations:

 1. Don't expect to see the most beautiful code you have ever seen

 2. Commit messages suck. I had just a few hours per night to work
    on this, I rushed a lot to see it working as soon as possible

 3. Don't expect you're going to play with the most efficient networking
    stack in your life. I did this for study purposes, not to replace
    the Linux networking stack with something else. There's a lot of
    copying going on and most algorithms are plain and have no
    optimizations whatsoever

 4. This is by far not compliant to some important RFCs, such as
    RFC 1122 (host requirements RFC)

 5. I'm really sure that bogus or malicious crafted packets can break
    this in innumerous ways

Having said that, let's talk about what really matter.

Building
========

To build this you're going to need electric fence and libconfig libraries. In
Fedora they are ElectricFence and libconfig-devel, respectively. If you want
to build the unit-tests (very good idea) you'll also need check, which is
check-devel in Fedora.

Just type "make" to build. To build and run the unit-tests, type "make check".

Setup
=====

There are two things to setup in order to play with this code: a tap
interface and the networking settings for pIP.

Tap Interface
-------------

Before setting up a tap interface you need to setup a bridge. This document
explains how to do set it in Fedora:

 http://docs.solusvm.com/kvm_bridge_setup

With the bridge up and running, run these commands:

 # tun -p -t tap0
 # ip link set tap0 up
 # brctrl addif <your-bridge-name> tap0

pIP stack configuration
-----------------------

All pIP programs read a configuration file containing informations like the
IP address you want to use, hardware address, routes etc.

You can find an example of this file in test/pip.cfg. You need to edit this
file to match your network.

Testing
=======

pIP comes with some test tools. The most interesting of them is "uping":

# ./pping test/pip.cfg 74.125.225.19
PING 74.125.225.19 (74.125.225.19) 64 bytes of data
64 bytes from 74.125.225.19: icmp_seq=1 ttl=57 time=38.880 ms
64 bytes from 74.125.225.19: icmp_seq=2 ttl=57 time=39.346 ms
64 bytes from 74.125.225.19: icmp_seq=3 ttl=57 time=34.368 ms
...

 (don't pass a name in there, because the stack doesn't have DNS support)

There are also two other tools: pdump (which just dump packets, this was
the first tool I wrote) and parp (which is a command-line ARP).

Contact
=======

Luiz Capitulino <lcapitulino@gmail.com>
